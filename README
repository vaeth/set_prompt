(C) Martin VÃ¤th <martin@mvath.de>
This project is under the BSD license.

An intelligent prompt for zsh or bash with status line (window title) support.

This is a collection of scripts which allow you to use an intelligent prompt
for zsh or bash which also sets a corresponding hardstatus line
(if your terminal supports it).

For a demo printing a simple default prompt, execute this in your shell:

printf '\e[0;33mme\e[36m@\e[32mhost\e[36m(my text)\e[1;32m~/very/l' \
&& printf '\e[0;34m...\e[1;32mong/pathname\e[1;33m%%\e[0m\n'

Under X, tmux, or screen, the text will appear (slightly changed) in addition
as your window title (status line).
The above line only displays the simplest prompt: You can see more information
in the prompt if e.g. you are logged in by ssh, if you are in a directory with
a git project, or if your last command exited unsuccessfully.
A configuration file is supported in which you can easily customize the prompt
(e.g. change colors or conditions), using standard shell code.


To install these scripts, copy them somewhere into your $PATH;
the default configuration set_prompt.config can alternatively
also be copied into /usr/local/etc or /etc.
For Gentoo, there is an ebuild in the mv overlay (available by layman).

The main program is
	set_prompt
To get help for this program, call
	set_prompt -h

The set_prompt program outputs a valid string for PS1 for zsh
(or for bash if the -b option is used). If used with zsh, the prompt usually
expects that the PROMPT_SUBST option is actived ("setopt promptsubst").

The set_prompt program can be either executed or sourced by zsh, bash, or
any other POSIX compatible shell. If you source it, you should source it in
a subshell, of course (which happens automatically with `...`).
The advantage of sourcing is that it is faster.
Note that even if sourced from bash, the -b option is not implied.

By default, the set_prompt program sources the configuration file
	set_prompt.config
(which is searched in /usr/local/etc/, /etc/, and in your PATH).
So you should customize that file for your taste (e.g. to define the colors).

There is a sample script
	set_prompt.sh
which, if sourced, defines a function
	set_prompt
which acts like the set_prompt program with the difference that is sends the
output directly to PS1 and that appropriate options are used by default.
(In particular, default options are set for broken bash versions.)
The set_prompt.sh script makes use of particular variables, so you might
want to look at the source and modify it for your needs before using it.

Finally, the prompt supports also the variables VCSBRANCH and VCSSTATUS
which might be changed for each prompt. For zsh, there is also a script
	git_prompt.zsh
which, if sourced, sets VCSBRANCH and VCSSTATUS correspondingly whenever
you change into (or out of) a git directory to inform you in the prompt
about the git state corresponding to your current directory.

Note that if you use git_prompt.zsh (especially, if you do this as root)
this has some serious security implications:

To obtain the status, git_prompt.zsh must execute "git status" which
might do unpredictable things with a specially crafted top-level .git
directory. Thus, even a mere "cd" as root might be dangerous if
git_prompt.zsh would take no measurements!
Moreover, unfortunately, "git status" (with current git versions)
usually writes into the top-level .git directory which allows symlink attacks.
git_prompt.zsh has some mechanisms to avoid this problem:

(1) "git status" is called as $GIT_UPDATE_USER (default: nobody)
(if your zsh is run with privileges to become that user).
Set GIT_UPDATE_USER='' to suppress this mechanism.

(2) You can optionally define a function/command "GitUpdateUser".
If you have done so, this function/command is executed in the running zsh
instance every time before "git status" is called.
If this function returns a nonzero exit status, "git status" is skipped.
Thus, you can use this function to decide on a case-by-case basis
(e.g. depending on the current directory) whether to skip "git status".
This function is called before (1); hence you can use this function also
e.g. to set GIT_UPDATE_USER to the owner of the current directory
(or of the current top-level .git directory).

(3) Normally, git_prompt.zsh sets GIT_UPDATE when being sourced.
If you want to disable the functionality of the script, just unset GIT_UPDATE
(or set it to "false" or to an empty value). You can set GIT_UPDATE later on
again to reenable the functionality. Note that (1) and (2) are unnecessary
(and thus skipped) if GIT_UPDATE is unset.

(4) If you do not have a "git" command, sourcing of the script does nothing.
Thus, under normal circumstances, you need not check first whether git is
installed. Note that GIT_UPDATE will not be set if git is not installed;
thus you can just check this variable after sourcing if you want to know that.

(5) Recall that when sourcing in zsh you can pass local arguments like so:
	. git_prompt.zsh [arguments]
Normally, the script behaves as if you just changed into the current directory,
i.e. "git status" is called immediately (with (1) and (2) as above) to update
VCSBRANCH and VCSSTATUS immediately.
You can avoid this by passing -n as the first argument. This can be useful if
e.g. you want to check the variable GIT_UPDATE before setting up the
GIT_UPDATE_USER variable or the GitUpdateUser command (see (1) and (2)) and
not risking any security issues. In this case you can afterwards activate
the script by calling "cd ."

