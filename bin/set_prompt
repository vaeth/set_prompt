#!/usr/bin/env sh
# (C) Martin V\"ath <martin@mvath.de>
set -u
unset LC_ALL
LC_COLLATE=C

name=set_prompt
config_file=$name.config
version=v2.1.0

Echo() {
	printf '%s\n' "$*"
}

Echon() {
	printf '%s' "$*"
}

zsh_escape="`printf '\033'`"
bash_escape='\e'

zsh_charseven="`printf '\007'`"
bash_charseven='\007'

zsh_backslash='\'
bash_backslash='\\'

# Now we specify colors and attributes which can be used in configuration.
# You must first specify colors and then other attributes.
# The values are the ANSI-Escape sequences (without \e), optionally followed
# by a space and a more readable zsh escape sequence.

black='[0;30m %b%F{black}'
blue='[0;34m %b%F{blue}'
green='[0;32m %b%F{green}'
cyan='[0;36m %b%F{cyan}'
red='[0;31m %b%F{red}'
purple='[0;35m %b%F{magenta}'
brown='[0;33m %b%F{yellow}'
lightgray='[0;37m %b%F{white}'
darkgray='[1;30m %B%F{black}'
lightblue='[1;34m %B%F{blue}'
lightgreen='[1;32m %B%F{green}'
lightcyan='[1;36m %B%F{cyan}'
lightred='[1;31m %B%F{red}'
lightpurple='[1;35m %B%F{magenta}'
yellow='[1;33m %B%F{yellow}'
white='[1;37m %B%F{white}'

backblack='[40m %K{black}'
backblue='[44m %K{blue}'
backgreen='[42m %K{green}'
backcyan='[46m %K{cyan}'
backred='[41m %K{red}'
backpurple='[45m %K{magenta}'
backbrown='[43m %K{yellow}'
backlightgray='[47m %K{white}'

default='[0m'
bold='[1m %B'
faint='[2m'
standout='[3m %S'
underline='[4m %U'
blink='[5m'
reverse='[7m'
conceal='[8m'

# The default configuration:

text_at='@'
text_dots='...'
text_trail=' '

# Colors for the configuration:

color_user=$brown
color_at=$cyan
color_host_normal=$green
color_host_ssh=$lightred
color_separator=$cyan
color_errstatus=$lightred
color_errbrace=$brown
color_dir=$lightgreen
color_dots=$blue
color_prompt=$yellow
color_trail=$default
color_endall=

# All the above color_* variables must be listed here (without prefix color_)
# If you add color variables in the configuration, you must also add them
# to this list: You can use them in indirect variables with prefix col_

color_vars='user
at
host_normal
host_ssh
separator
errstatus
errbrace
dir
dots
prompt
trail
endall'

# Configuration indirect variables (can use col_ or stripped zsh/bash variables)

hstatus_status='%(?..:%?)'
sstatus_status='%(?.. %?)'
ps_status='%(?..$col_errbrace($col_errstatus%?$col_errbrace%))'

# Other indirect variables

starthstatus='$escape]0;'
endhstatus='$charseven'
startsstatus='${escape}k'
endsstatus='$escape$backslash'

# List of indirect variables. The list can be modified in configuration.

indirect_vars='hstatus_status
sstatus_status
ps_status
starthstatus
endhstatus
startsstatus
endsstatus'

# Prompt escapes:

zsh_ps_open='%{'
zsh_ps_close='%}'
zsh_ps_dir='%~'
zsh_ps_user='%n'
zsh_ps_host='%m'

# Helper functions to set zsh_ps_prompt:

# ZshUTF VAR symbol
# defines VAR as a (possibly) UTF8 symbol in the zsh prompt (1 character long).
ZshUTF() {
	if [ ${#2} -ne 1 ]
	then	eval $1='"$zsh_ps_open%G$2$zsh_ps_close"'
	elif	[ x"$2" = x'%' ]
	then	eval $1='"%%"'
	else	eval $1=\$2
	fi
}

# ZshPs [privileged-symbol] [normal-symbol]
# Set prompt symbol for zsh for privileged-symbol or normal-symbol
# (depending on whether zsh is in privileged mode or not).
# It is explicitly admissible to use UTF8 symbols.
# For omitted arguments the zsh defaults "&" and "%" are used, respectively.
ZshPs() {
	zsh_ps_priv=${1:-#}
	zsh_ps_prompt=${2:-%}
	if [ x"$zsh_ps_priv" = x'#' ] && [ x"$zsh_ps_prompt" = x'%' ]
	then	zsh_ps_prompt='%#'
		return
	fi
	ZshUTF zsh_ps_priv "$zsh_ps_priv"
	ZshUTF zsh_ps_prompt "$zsh_ps_prompt"
	zsh_ps_prompt='%(!.'"$zsh_ps_priv.$zsh_ps_prompt"')'
}

# We default to "&" for a privileged zsh to disinguish it from bash
# (feel free to call ZshPs with different arg(s) in set_prompt.config;
# you can use e.g. unicode symbols if your locale/terminal/font supports it)
ZshPs '&'

bash_ps_open='\['
bash_ps_close='\]'
bash_ps_dir='\w'
bash_ps_user='\u'
bash_ps_host='\h'
bash_ps_prompt='\$'

# The following variables will be stripped from their zsh_ or bash_ prefix,
# depending on the calling mode:

strip_vars='escape
charseven
backslash
ps_open
ps_close
ps_dir
ps_user
ps_host
ps_prompt'

Usage() {
	Echo \
"Usage: temp=\$($name [options] [args for $config_file]; echo X) "'\
    && PS1=${temp%X} ; [ -z "$ZSH_NAME" ] || setopt promptsubst'"
Options:
-b Output for bash instead of zsh (implies -VE)
-r Use readable (non-binary) output. Use printf '%s' or echo -E for output.
-C No colorized prompt
-s Use screen statusline (even if TERM is not in the supported list)
-x Use hardstatus line (even if TERM is not in the supported list)
-S Do not use screen statusline
-X No hardstatus line
-v Support \$vcs_info_msg_0_ (even with -b)
-V Do not support \$vcs_info_msg_0_
-E Do not show error status
-h Show this help text
-e TEXT   Use extra TEXT (instead of separator)
-c FILE   Source FILE instead of $config_file; empty value skips sourcing
-l MAXLEN Allow directory path to grow maximal to MAXLEN (0 means no limit)
-L LEFT   Keep at least LEFT characters of directory path before the dots
-n print version number and exit
--        last option" >&2
	exit ${1:-1}
}

Version() {
	if test -t 1
	then	Echo "$name $version"
		exit 0
	fi
	Echo "$name $version" >&2
	exit 1
}

readable=false
color=:
zsh=:
skipstatus=false
separator=':'
softstatus=
hardstatus=
vcs=':'
maxlen=24
leftkeep=8
extra_text=
OPTIND=1
while getopts 'rEe:sSxXCbvVl:L:c:nhH' arg
do	case $arg in
	r)	readable=:;;
	E)	skipstatus=:;;
	e)	extra_text=$OPTARG;;
	s)	softstatus=:;;
	S)	softstatus=false;;
	x)	hardstatus=:;;
	X)	hardstatus=false;;
	C)	color=false;;
	b)	zsh=false
		vcs=false;;
	v)	vcs=:;;
	V)	vcs=false;;
	l)	maxlen=$OPTARG;;
	L)	leftkeep=$OPTARG;;
	c)	config_file=$OPTARG;;
	n)	Version;;
	'?')	exit 1;;
	*)	Usage 0;;
	esac
done
shift $(( $OPTIND - 1 ))

# We define some functions early so that they can be used/modified in the
# configuration if required.

StripVars() {
	if $zsh
	then	prevar='zsh_'
	else	prevar='bash_'
	fi
	for var in $strip_vars
	do	eval $var=\${$prevar$var}
	done
}

ColorVars() {
	for var in $color_vars
	do	eval "if $color && [ -n \"\${color_$var:++}\" ]
		then	$zsh_readable && case \${color_$var} in
			*' '*)
				color_$var=\${color_$var#* };;
			*)
				color_$var=\$escape\${color_$var};;
			esac || color_$var=\$escape\${color_$var%% *}
			col_$var=\$ps_open\${color_$var}\$ps_close
		else	col_$var=
		fi"
	done
}

IndirectVars() {
	for var in $indirect_vars
	do	eval eval $var=\\\"\$$var\\\"
	done
}

# The wrapper for the above three functions.
# If sourced from zsh, we must make sure that the variable lists are
# indeed expanded, so we must switch on emulation mode.

HandleVars() {
	[ -n "${ZSH_NAME:++}" ] && emulate -L sh
	StripVars
	ColorVars
	IndirectVars
}

if [ -n "${config_file:++}" ]
then	PATH=$PATH${PATH:+:}/usr/local/etc:/etc: . "$config_file"
fi

NumberOrNull() {
	eval "case \${$1:-x} in
	*[!0123456789]*)
		$1=0;;
	esac"
}

NumberOrNull maxlen

if $zsh
then	zsh_readable=$readable
else	zsh_readable=false
	skipstatus=:
fi

if ! $readable
then	bash_escape=$zsh_escape
	bash_charseven=$zsh_charseven
elif $zsh
then	zsh_escape='`printf '\''\e'\''`'
	zsh_charseven='`printf '\''\a'\''`'
	zsh_backslash=$bash_backslash
fi

HandleVars

if [ -n "${extra_text:++}" ]
then	separator=$extra_text
fi

col_host=$col_host_normal'${SSH_CONNECTION:+"'$col_host_ssh'"}'

if [ -z "${softstatus:++}" ]
then	softstatus=false
	case $TERM in
	screen*|tmux*)
		softstatus=:;;
	esac
fi

if [ -z "${hardstatus:++}" ]
then	hardstatus=false
	case $TERM in
	xterm*|screen*|tmux*|rxvt*|aterm*|konsole*|gnome*|Eterm*|kterm*|interix*)
		hardstatus=:;;
	esac
fi

if [ $maxlen -gt 0 ]
then	statusdir='$d'
	ps_dir='$c'
else	statusdir=$ps_dir
fi

ps=
if $hardstatus || $softstatus
then	status_both=$ps_user$text_at$ps_host$extra_text$statusdir
	if $softstatus
	then	ps=$ps$startsstatus$status_both
		$skipstatus || ps=$ps$sstatus_status
		ps=$ps$endsstatus
	fi
	if $hardstatus
	then	ps=$ps$starthstatus$status_both
		$skipstatus || ps=$ps$hstatus_status
		ps=$ps$endhstatus
	fi
fi

if [ -n "${ps:++}" ]
then	ps=$ps_open$ps$color_user$ps_close
else	ps=$col_user
fi

ps=$ps$ps_user$col_at$text_at$col_host$ps_host
ps=$ps$col_separator$separator$col_dir$ps_dir
$skipstatus || ps=$ps$ps_status
! $vcs || ps=$ps\${vcs_info_msg_0_-}
ps=$ps$col_prompt$ps_prompt$col_trail$text_trail$col_endall
if [ $maxlen -gt 0 ]
then	[ $maxlen -gt ${#text_dots} ] || maxlen=${#text_dots}
	leftmax=$(( $maxlen - ${#text_dots} ))
	NumberOrNull leftkeep
	[ $leftkeep -le $leftmax ] || leftkeep=$leftmax
	rightkeep=$(( $maxlen - $leftkeep - ${#text_dots} ))
	d2=
	d3=
	if $zsh
	then	# use locals to avoid warnings with setopt warn_create_global
		open='$(() { local c d= REPLY='
		close='
})'
		d1='d=$(print -P '\''%~'\'')'
		if [ $leftkeep -eq 1 ]
		then	d2='${d[1]}'
		elif [ $leftkeep -gt 1 ]
		then	d2='${d[1,'"$leftkeep"']}'
		fi
		if [ $rightkeep -gt 0 ]
		then	rightkeep=$(( $rightkeep - 1 ))
			if [ $rightkeep -eq 0 ]
			then	d3='${d[${#d}]}'
			else	d3='${d[${#d}-'"$rightkeep"',${#d}]}'
			fi
		fi
	else	open='$(d='
		close=')'
		d1='d=${PWD#~}
[ "$d" = "$PWD" ] || d="~$d"'
		[ $leftkeep -le 0 ] || d2='${d:0:'"$leftkeep"'}'
		[ $rightkeep -le 0 ] || d3='${d: -'"$rightkeep"'}'
	fi
	ps="$open
$d1
if [ \${#d} -le $maxlen ]
then	c=\$d
else	c=\"$d2$col_dots$text_dots$col_dir$d3\"
	d=\"$d2$text_dots$d3\"
fi
printf '%s' \"$ps\"$close"
fi
Echon "$ps"
